// @flow weak
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// $FlowFixMe
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _flowRuntime = require("flow-runtime");

var _flowRuntime2 = _interopRequireDefault(_flowRuntime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function literal(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    "class": function _class(expectation) {
      var escapedParts = "",
          i;

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
      }

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function any(expectation) {
      return "any character";
    },

    end: function end(expectation) {
      return "end of input";
    },

    other: function other(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function classEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i,
        j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input /*: string */, options /*:: ?: Object */) /*: ODataAST */ {
  var _inputType = _flowRuntime2.default.string();

  var _optionsType = _flowRuntime2.default.object();

  var _returnType = _flowRuntime2.default.return(_flowRuntime2.default.tdz(function () {
    return ODataAST1
  }, "ODataAST"));

  _flowRuntime2.default.param("input", _inputType).assert(input);

  _flowRuntime2.default.param("options", _optionsType, true).assert(options);

  options = _optionsType.assert(options !== void 0 ? options : {});

  var peg$FAILED = {},
      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction = peg$parsestart,
      peg$c0 = " ",
      peg$c1 = peg$literalExpectation(" ", false),
      peg$c2 = /^[0-9]/,
      peg$c3 = peg$classExpectation([["0", "9"]], false, false),
      peg$c4 = function peg$c4(a) {
    return a.join('');
  },
      peg$c5 = /^[0-9a-fA-F]/,
      peg$c6 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c7 = "%x27",
      peg$c8 = peg$literalExpectation("%x27", false),
      peg$c9 = "'",
      peg$c10 = peg$literalExpectation("'", false),
      peg$c11 = "%x22",
      peg$c12 = peg$literalExpectation("%x22", false),
      peg$c13 = "\"",
      peg$c14 = peg$literalExpectation("\"", false),
      peg$c15 = function peg$c15(value) {
    if (!value[1]) value[1] = '';
    return { type: 'null', value: value };
  },
      peg$c16 = "null",
      peg$c17 = peg$literalExpectation("null", false),
      peg$c18 = "true",
      peg$c19 = peg$literalExpectation("true", false),
      peg$c20 = function peg$c20() {
    return { type: 'boolean', value: true };
  },
      peg$c21 = "1",
      peg$c22 = peg$literalExpectation("1", false),
      peg$c23 = "false",
      peg$c24 = peg$literalExpectation("false", false),
      peg$c25 = function peg$c25() {
    return { type: 'boolean', value: false };
  },
      peg$c26 = "0",
      peg$c27 = peg$literalExpectation("0", false),
      peg$c28 = function peg$c28(a) {
    return {
      type: 'dateTimeOffset',
      value: a
    };
  },
      peg$c29 = function peg$c29(a) {
    return {
      type: 'date',
      value: a
    };
  },
      peg$c30 = function peg$c30(a) {
    return {
      type: 'timeOfDay',
      value: a
    };
  },
      peg$c31 = "-",
      peg$c32 = peg$literalExpectation("-", false),
      peg$c33 = function peg$c33(a, b, c) {
    return a + '-' + b + '-' + c;
  },
      peg$c34 = ":",
      peg$c35 = peg$literalExpectation(":", false),
      peg$c36 = function peg$c36(a, b) {
    return a + ":" + b;
  },
      peg$c37 = ".",
      peg$c38 = peg$literalExpectation(".", false),
      peg$c39 = function peg$c39(a, b) {
    return a + "." + b;
  },
      peg$c40 = "T",
      peg$c41 = peg$literalExpectation("T", false),
      peg$c42 = function peg$c42(a, d) {
    return a + "T" + d;
  },
      peg$c43 = "Z",
      peg$c44 = peg$literalExpectation("Z", false),
      peg$c45 = function peg$c45(a, b) {
    return a + b;
  },
      peg$c46 = ":00",
      peg$c47 = peg$literalExpectation(":00", false),
      peg$c48 = function peg$c48(a, b, c) {
    return a + b + c + ":00";
  },
      peg$c49 = "M",
      peg$c50 = peg$literalExpectation("M", false),
      peg$c51 = "m",
      peg$c52 = peg$literalExpectation("m", false),
      peg$c53 = function peg$c53(sign, digit, decimal) {
    return { type: 'decimal', value: (sign || '') + digit.join('') + '.' + decimal.join('') };
  },
      peg$c54 = function peg$c54(sign, digit) {
    return { type: 'decimal', value: (sign || '') + digit.join('') };
  },
      peg$c55 = function peg$c55(sign, digit) {
    return {
      type: 'integer',
      value: parseInt(digit.join('')) * (sign === '-' ? -1 : 1)
    };
  },
      peg$c56 = function peg$c56(value) {
    return {
      type: 'string',
      value: value
    };
  },
      peg$c57 = function peg$c57(a) {
    return {
      type: 'NaN/Infinity',
      value: a
    };
  },
      peg$c58 = /^[1-9]/,
      peg$c59 = peg$classExpectation([["1", "9"]], false, false),
      peg$c60 = function peg$c60(a, b) {
    return a + b;
  },
      peg$c61 = /^[0-2]/,
      peg$c62 = peg$classExpectation([["0", "2"]], false, false),
      peg$c63 = "13",
      peg$c64 = peg$literalExpectation("13", false),
      peg$c65 = "60",
      peg$c66 = peg$literalExpectation("60", false),
      peg$c67 = /^[0-5]/,
      peg$c68 = peg$classExpectation([["0", "5"]], false, false),
      peg$c69 = "3",
      peg$c70 = peg$literalExpectation("3", false),
      peg$c71 = /^[0-1]/,
      peg$c72 = peg$classExpectation([["0", "1"]], false, false),
      peg$c73 = function peg$c73(a) {
    return "3" + a;
  },
      peg$c74 = "2",
      peg$c75 = peg$literalExpectation("2", false),
      peg$c76 = /^[0-4]/,
      peg$c77 = peg$classExpectation([["0", "4"]], false, false),
      peg$c78 = function peg$c78(a) {
    return "2" + a;
  },
      peg$c79 = function peg$c79(a, b, c, d) {
    return a + b + c + d;
  },
      peg$c80 = "+",
      peg$c81 = peg$literalExpectation("+", false),
      peg$c82 = "NaN",
      peg$c83 = peg$literalExpectation("NaN", false),
      peg$c84 = "-INF",
      peg$c85 = peg$literalExpectation("-INF", false),
      peg$c86 = "INF",
      peg$c87 = peg$literalExpectation("INF", false),
      peg$c88 = function peg$c88(a) {
    return { type: 'parameter-alias', value: a };
  },
      peg$c89 = "@lx_myUser_Id",
      peg$c90 = peg$literalExpectation("@lx_myUser_Id", false),
      peg$c91 = "@lx_myOrg_Id",
      peg$c92 = peg$literalExpectation("@lx_myOrg_Id", false),
      peg$c93 = "@lx_myUser_Timezone",
      peg$c94 = peg$literalExpectation("@lx_myUser_Timezone", false),
      peg$c95 = "@lx_myTeam",
      peg$c96 = peg$literalExpectation("@lx_myTeam", false),
      peg$c97 = "@lx_myWorkflows",
      peg$c98 = peg$literalExpectation("@lx_myWorkflows", false),
      peg$c99 = /^[a-zA-Z0-9\-_]/,
      peg$c100 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false),
      peg$c101 = /^[^']/,
      peg$c102 = peg$classExpectation(["'"], true, false),
      peg$c103 = function peg$c103(a) {
    return a.join('').replace(/('')/g, "'");
  },
      peg$c104 = "''",
      peg$c105 = peg$literalExpectation("''", false),
      peg$c106 = function peg$c106(a) {
    return a;
  },
      peg$c107 = /^[^"]/,
      peg$c108 = peg$classExpectation(["\""], true, false),
      peg$c109 = /^[a-zA-Z]/,
      peg$c110 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c111 = function peg$c111(a, b) {
    return a + b.join('');
  },
      peg$c112 = "/",
      peg$c113 = peg$literalExpectation("/", false),
      peg$c114 = function peg$c114(i, list) {
    if (!list) list = [];
    if (Array.isArray(list[0])) {
      list = list[0];
    }
    return "/" + i + String(list);
  },
      peg$c115 = function peg$c115(a, b) {
    return a + (b || '');
  },
      peg$c116 = function peg$c116(n, u) {
    if (u) {
      return {
        type: 'property',
        name: n,
        unit: u
      };
    } else {
      return {
        type: 'property',
        name: n
      };
    }
  },
      peg$c117 = "()",
      peg$c118 = peg$literalExpectation("()", false),
      peg$c119 = function peg$c119(u) {
    return u;
  },
      peg$c120 = "microseconds",
      peg$c121 = peg$literalExpectation("microseconds", false),
      peg$c122 = "milliseconds",
      peg$c123 = peg$literalExpectation("milliseconds", false),
      peg$c124 = "second",
      peg$c125 = peg$literalExpectation("second", false),
      peg$c126 = "minute",
      peg$c127 = peg$literalExpectation("minute", false),
      peg$c128 = "hour",
      peg$c129 = peg$literalExpectation("hour", false),
      peg$c130 = "day",
      peg$c131 = peg$literalExpectation("day", false),
      peg$c132 = "week",
      peg$c133 = peg$literalExpectation("week", false),
      peg$c134 = "month",
      peg$c135 = peg$literalExpectation("month", false),
      peg$c136 = "quarter",
      peg$c137 = peg$literalExpectation("quarter", false),
      peg$c138 = "year",
      peg$c139 = peg$literalExpectation("year", false),
      peg$c140 = "decade",
      peg$c141 = peg$literalExpectation("decade", false),
      peg$c142 = "century",
      peg$c143 = peg$literalExpectation("century", false),
      peg$c144 = "millennium",
      peg$c145 = peg$literalExpectation("millennium", false),
      peg$c146 = "$callback=",
      peg$c147 = peg$literalExpectation("$callback=", false),
      peg$c148 = function peg$c148(a) {
    return { '$callback': a };
  },
      peg$c149 = "$top=",
      peg$c150 = peg$literalExpectation("$top=", false),
      peg$c151 = function peg$c151(a) {
    return { '$top': ~~a };
  },
      peg$c152 = peg$anyExpectation(),
      peg$c153 = function peg$c153() {
    expected('a valid $top parameter (integer)');
  },
      peg$c154 = "$expand=",
      peg$c155 = peg$literalExpectation("$expand=", false),
      peg$c156 = function peg$c156(list) {
    return { "$expand": list };
  },
      peg$c157 = function peg$c157() {
    expected('a valid $expand parameter (identifierPath)');
  },
      peg$c158 = "(",
      peg$c159 = peg$literalExpectation("(", false),
      peg$c160 = ")",
      peg$c161 = peg$literalExpectation(")", false),
      peg$c162 = function peg$c162(p, o) {
    return o;
  },
      peg$c163 = ",",
      peg$c164 = peg$literalExpectation(",", false),
      peg$c165 = function peg$c165(p, opts, l) {
    return l;
  },
      peg$c166 = function peg$c166(p, opts, list) {
    if (!opts) opts = [];
    var options = {};
    for (var i = 0; i < opts.length; i++) {
      var opt = opts[i];
      if (opt && (typeof opt === "undefined" ? "undefined" : _typeof(opt)) === 'object') {
        var key = Object.keys(opt)[0];
        if (options.hasOwnProperty(key)) {
          expected(key + ' to not appear more than once in $expand option');
        }
        options[key] = opt[key];
      }
    }
    if (!list) list = [];
    if (Array.isArray(list[0])) {
      list = list[0];
    }
    // FIXME: Make this just look at the navigation property, not the ancillary type information,
    // and store the rest of the type information elsewhere in the structure.
    if (list.findIndex(function (entry) {
      return entry.path === p;
    }) !== -1) {
      expected(p + ' to not appear more than once in $expand path');
    }
    list.unshift({ path: p, options: options });
    return list;
  },
      peg$c167 = ";",
      peg$c168 = peg$literalExpectation(";", false),
      peg$c169 = function peg$c169(e, el) {
    return [e].concat(el);
  },
      peg$c170 = function peg$c170(e) {
    return [e];
  },
      peg$c171 = "$skip=",
      peg$c172 = peg$literalExpectation("$skip=", false),
      peg$c173 = function peg$c173(a) {
    return { '$skip': ~~a };
  },
      peg$c174 = function peg$c174() {
    expected('a valid $skip parameter (integer)');
  },
      peg$c175 = "$format=",
      peg$c176 = peg$literalExpectation("$format=", false),
      peg$c177 = function peg$c177(v) {
    return { '$format': v.join('') };
  },
      peg$c178 = function peg$c178() {
    expected('a valid $format parameter (string)');
  },
      peg$c179 = "$count=",
      peg$c180 = peg$literalExpectation("$count=", false),
      peg$c181 = function peg$c181(v) {
    return { '$count': v.value };
  },
      peg$c182 = function peg$c182() {
    expected('a valid $count parameter (boolean)');
  },
      peg$c183 = "$search=",
      peg$c184 = peg$literalExpectation("$search=", false),
      peg$c185 = function peg$c185(s) {
    return { '$search': s };
  },
      peg$c186 = function peg$c186() {
    expected('a valid $search parameter (string)');
  },
      peg$c187 = function peg$c187(s) {
    return s;
  },
      peg$c188 = function peg$c188(s) {
    return s.join('');
  },
      peg$c189 = function peg$c189(value) {
    return value;
  },
      peg$c190 = "$orderby=",
      peg$c191 = peg$literalExpectation("$orderby=", false),
      peg$c192 = function peg$c192(list) {
    return { "$orderby": list };
  },
      peg$c193 = function peg$c193() {
    expected('a valid $orderby parameter (identifierPath "asc"|"desc")');
  },
      peg$c194 = "asc",
      peg$c195 = peg$literalExpectation("asc", false),
      peg$c196 = "desc",
      peg$c197 = peg$literalExpectation("desc", false),
      peg$c198 = function peg$c198(id, ord) {
    var result = {};
    result[id] = ord && ord[1] || 'asc';
    return result;
  },
      peg$c199 = function peg$c199(i, l) {
    return l;
  },
      peg$c200 = function peg$c200(i, list) {
    if (!list) list = [];
    if (Array.isArray(list[0])) {
      list = list[0];
    }
    list.unshift(i);
    return list;
  },
      peg$c201 = "$select=",
      peg$c202 = peg$literalExpectation("$select=", false),
      peg$c203 = function peg$c203(list) {
    return { "$select": list };
  },
      peg$c204 = function peg$c204() {
    expected('a valid $select parameter (identifierPath)');
  },
      peg$c205 = ".*",
      peg$c206 = peg$literalExpectation(".*", false),
      peg$c207 = function peg$c207(a, b) {
    return (a || '') + (b || '');
  },
      peg$c208 = "*",
      peg$c209 = peg$literalExpectation("*", false),
      peg$c210 = "$apply=",
      peg$c211 = peg$literalExpectation("$apply=", false),
      peg$c212 = function peg$c212(t) {
    return {
      "$apply": t
    };
  },
      peg$c213 = function peg$c213(i, list) {
    if (!list) list = [];
    list = list.filter(function (f) {
      return f !== "/" && f !== " " && f;
    });
    if (Array.isArray(list[0])) {
      list = list[0];
    }
    list.unshift(i);
    return list;
  },
      peg$c214 = "filter",
      peg$c215 = peg$literalExpectation("filter", false),
      peg$c216 = function peg$c216(t, a) {
    return {
      type: "transformation",
      func: t,
      args: [a]
    };
  },
      peg$c217 = "identity",
      peg$c218 = peg$literalExpectation("identity", false),
      peg$c219 = function peg$c219(t) {
    return {
      type: "transformation",
      func: t,
      args: []
    };
  },
      peg$c220 = "aggregate",
      peg$c221 = peg$literalExpectation("aggregate", false),
      peg$c222 = function peg$c222(t, list) {
    return {
      type: "transformation",
      func: t,
      args: list
    };
  },
      peg$c223 = function peg$c223(t, list) {
    return {
      "type": "transformation",
      "func": t,
      "args": list
    };
  },
      peg$c224 = "topcount",
      peg$c225 = peg$literalExpectation("topcount", false),
      peg$c226 = "topsum",
      peg$c227 = peg$literalExpectation("topsum", false),
      peg$c228 = "toppercent",
      peg$c229 = peg$literalExpectation("toppercent", false),
      peg$c230 = "bottomcount",
      peg$c231 = peg$literalExpectation("bottomcount", false),
      peg$c232 = "bottomsum",
      peg$c233 = peg$literalExpectation("bottomsum", false),
      peg$c234 = "bottompercent",
      peg$c235 = peg$literalExpectation("bottompercent", false),
      peg$c236 = "expand",
      peg$c237 = peg$literalExpectation("expand", false),
      peg$c238 = "search",
      peg$c239 = peg$literalExpectation("search", false),
      peg$c240 = "compute",
      peg$c241 = peg$literalExpectation("compute", false),
      peg$c242 = function peg$c242(i, list) {
    if (!list) list = [];
    list = list.filter(function (f) {
      return f !== "," && f !== " " && f;
    });
    if (Array.isArray(list[0])) {
      list = list[0];
    }
    list.unshift(i);
    return list;
  },
      peg$c243 = function peg$c243(a) {
    return a;
  },
      peg$c244 = function peg$c244(a) {
    return a;
  },
      peg$c245 = "or",
      peg$c246 = peg$literalExpectation("or", false),
      peg$c247 = function peg$c247(left, type, right) {
    return {
      type: type,
      left: left,
      right: right
    };
  },
      peg$c248 = "and",
      peg$c249 = peg$literalExpectation("and", false),
      peg$c250 = "with",
      peg$c251 = peg$literalExpectation("with", false),
      peg$c252 = "as",
      peg$c253 = peg$literalExpectation("as", false),
      peg$c254 = function peg$c254(i, m, a) {
    return {
      "type": "alias",
      "name": a,
      "expression": {
        "type": "aggregate",
        "func": m,
        "args": [i]
      }
    };
  },
      peg$c255 = "$count",
      peg$c256 = peg$literalExpectation("$count", false),
      peg$c257 = "sum",
      peg$c258 = peg$literalExpectation("sum", false),
      peg$c259 = "min",
      peg$c260 = peg$literalExpectation("min", false),
      peg$c261 = "max",
      peg$c262 = peg$literalExpectation("max", false),
      peg$c263 = "average",
      peg$c264 = peg$literalExpectation("average", false),
      peg$c265 = "countdistinct",
      peg$c266 = peg$literalExpectation("countdistinct", false),
      peg$c267 = function peg$c267(p, a) {
    return {
      "type": "alias",
      "name": a,
      "expression": p
    };
  },
      peg$c268 = function peg$c268(p, a) {
    return {
      "type": "alias",
      "name": a,
      "expression": p
    };
  },
      peg$c269 = "$filter=",
      peg$c270 = peg$literalExpectation("$filter=", false),
      peg$c271 = function peg$c271(list) {
    return {
      "$filter": list
    };
  },
      peg$c272 = function peg$c272() {
    expected('a valid $filter parameter');
  },
      peg$c273 = function peg$c273(left, type, right) {
    return {
      type: type,
      left: left,
      right: right
    };
  },
      peg$c274 = "substringof",
      peg$c275 = peg$literalExpectation("substringof", false),
      peg$c276 = "endswith",
      peg$c277 = peg$literalExpectation("endswith", false),
      peg$c278 = "startswith",
      peg$c279 = peg$literalExpectation("startswith", false),
      peg$c280 = "IsOf",
      peg$c281 = peg$literalExpectation("IsOf", false),
      peg$c282 = "contains",
      peg$c283 = peg$literalExpectation("contains", false),
      peg$c284 = function peg$c284(f, arg0, arg1) {
    return {
      type: "functioncall",
      func: f,
      args: [arg0, arg1]
    };
  },
      peg$c285 = "IsOf(",
      peg$c286 = peg$literalExpectation("IsOf(", false),
      peg$c287 = function peg$c287(arg0) {
    return {
      type: "functioncall",
      func: "IsOf",
      args: [arg0]
    };
  },
      peg$c288 = "tolower",
      peg$c289 = peg$literalExpectation("tolower", false),
      peg$c290 = "toupper",
      peg$c291 = peg$literalExpectation("toupper", false),
      peg$c292 = "trim",
      peg$c293 = peg$literalExpectation("trim", false),
      peg$c294 = "length",
      peg$c295 = peg$literalExpectation("length", false),
      peg$c296 = "round",
      peg$c297 = peg$literalExpectation("round", false),
      peg$c298 = "floor",
      peg$c299 = peg$literalExpectation("floor", false),
      peg$c300 = "ceiling",
      peg$c301 = peg$literalExpectation("ceiling", false),
      peg$c302 = function peg$c302(f, arg0) {
    return {
      type: "functioncall",
      func: f,
      args: [arg0]
    };
  },
      peg$c303 = function peg$c303(p, a, b, arg0) {
    return {
      type: "functioncall",
      func: p.func,
      args: [{
        type: "property",
        name: p.idPath
      }, arg0]
    };
  },
      peg$c304 = function peg$c304(p, arg0) {
    return {
      type: "functioncall",
      func: p.func,
      args: [{
        type: "property",
        name: p.idPath
      }, arg0]
    };
  },
      peg$c305 = function peg$c305(a, b) {
    // throw if the last item in not a collectionFunction name
    var collectionFunctionsArg = ["any", "all"];
    if (collectionFunctionsArg.indexOf(b[b.length - 1]) !== -1) {
      throw "Incorrect collection function name: " + b[b.length - 1];
    }
    var idPath = [];
    idPath.push(a);
    for (var i in b) {
      if (b[i].func) {
        return { idPath: idPath.join('/'), func: b[i].func };
      }
      idPath.push(b[i]);
    }
  },
      peg$c306 = function peg$c306(a, b) {
    var collectionFunctionsArg = ["any", "all"];
    if (collectionFunctionsArg.indexOf(b) !== -1) {
      return { func: b };
    }
    return b;
  },
      peg$c307 = function peg$c307(arg0, a, op, b) {
    return {
      type: "lambda",
      args: [arg0, {
        type: op,
        left: a,
        right: b
      }]
    };
  },
      peg$c308 = function peg$c308(a, b) {
    return b;
  },
      peg$c309 = "indexof",
      peg$c310 = peg$literalExpectation("indexof", false),
      peg$c311 = "concat",
      peg$c312 = peg$literalExpectation("concat", false),
      peg$c313 = "substring",
      peg$c314 = peg$literalExpectation("substring", false),
      peg$c315 = "replace",
      peg$c316 = peg$literalExpectation("replace", false),
      peg$c317 = function peg$c317(f, arg0, arg1) {
    return {
      type: "functioncall",
      func: f,
      args: [arg0, arg1]
    };
  },
      peg$c318 = "substring(",
      peg$c319 = peg$literalExpectation("substring(", false),
      peg$c320 = function peg$c320(arg0, arg1, arg2) {
    return {
      type: "functioncall",
      func: "substring",
      args: [arg0, arg1, arg2]
    };
  },
      peg$c321 = "replace(",
      peg$c322 = peg$literalExpectation("replace(", false),
      peg$c323 = function peg$c323(arg0, arg1, arg2) {
    return {
      type: "functioncall",
      func: "replace",
      args: [arg0, arg1, arg2]
    };
  },
      peg$c324 = function peg$c324(a, op, b) {
    return {
      type: op,
      left: a,
      right: b
    };
  },
      peg$c325 = "add",
      peg$c326 = peg$literalExpectation("add", false),
      peg$c327 = "sub",
      peg$c328 = peg$literalExpectation("sub", false),
      peg$c329 = "mul",
      peg$c330 = peg$literalExpectation("mul", false),
      peg$c331 = "div",
      peg$c332 = peg$literalExpectation("div", false),
      peg$c333 = "mod",
      peg$c334 = peg$literalExpectation("mod", false),
      peg$c335 = function peg$c335(l) {
    return {
      type: 'literal',
      literalType: l.type,
      value: l.value
    };
  },
      peg$c336 = "cast",
      peg$c337 = peg$literalExpectation("cast", false),
      peg$c338 = function peg$c338(a) {
    return {
      type: "cast",
      args: a
    };
  },
      peg$c339 = "Edm.Decimal",
      peg$c340 = peg$literalExpectation("Edm.Decimal", false),
      peg$c341 = function peg$c341(a, b) {
    return [{ type: 'literal', literalType: a.type, value: a.value }, b];
  },
      peg$c342 = "Edm.Int32",
      peg$c343 = peg$literalExpectation("Edm.Int32", false),
      peg$c344 = "Edm.Boolean",
      peg$c345 = peg$literalExpectation("Edm.Boolean", false),
      peg$c346 = "Edm.String",
      peg$c347 = peg$literalExpectation("Edm.String", false),
      peg$c348 = "Edm.DateTimeOffset",
      peg$c349 = peg$literalExpectation("Edm.DateTimeOffset", false),
      peg$c350 = "Edm.Date",
      peg$c351 = peg$literalExpectation("Edm.Date", false),
      peg$c352 = "Edm.TimeOfDay",
      peg$c353 = peg$literalExpectation("Edm.TimeOfDay", false),
      peg$c354 = "now()",
      peg$c355 = peg$literalExpectation("now()", false),
      peg$c356 = function peg$c356(u) {
    if (u) {
      return {
        type: "now",
        unit: u
      };
    }
    return {
      type: "now"
    };
  },
      peg$c357 = "eq",
      peg$c358 = peg$literalExpectation("eq", false),
      peg$c359 = "ne",
      peg$c360 = peg$literalExpectation("ne", false),
      peg$c361 = "lt",
      peg$c362 = peg$literalExpectation("lt", false),
      peg$c363 = "le",
      peg$c364 = peg$literalExpectation("le", false),
      peg$c365 = "gt",
      peg$c366 = peg$literalExpectation("gt", false),
      peg$c367 = "ge",
      peg$c368 = peg$literalExpectation("ge", false),
      peg$c369 = "$",
      peg$c370 = peg$literalExpectation("$", false),
      peg$c371 = function peg$c371(er) {
    expected('$select, $filter, $expand, $orderby, $callback, $format, $search, $count, $top, $count, $skip, or $apply');
  },
      peg$c372 = "&",
      peg$c373 = peg$literalExpectation("&", false),
      peg$c374 = function peg$c374(list) {
    //turn the array into an object like:
    // { $top: 5, $skip: 10 }
    var result = {};
    if (!Array.isArray(list)) list = [];
    for (var i = 0; i < list.length; i++) {
      var item = list[i];
      if (item) {
        var key = Object.keys(item)[0]; //ie: $top
        if (result.hasOwnProperty(key)) expected(key + ' to not appear more than once in query string');
        result[key] = item[key];
      }
    }
    return result;
  },
      peg$c375 = "=",
      peg$c376 = peg$literalExpectation("=", false),
      peg$c377 = function peg$c377(n, v) {
    return {
      type: 'property',
      name: n,
      value: v.value
    };
  },
      peg$c378 = function peg$c378(e, l) {
    return [e].concat(l);
  },
      peg$c379 = function peg$c379(e) {
    return [e];
  },
      peg$c380 = function peg$c380(v) {
    return [{
      type: 'literal',
      literalType: v.type,
      value: v.value
    }];
  },
      peg$c381 = function peg$c381(n, p) {
    return {
      name: n,
      predicates: p
    };
  },
      peg$c382 = function peg$c382(n) {
    return {
      name: n
    };
  },
      peg$c383 = "$value",
      peg$c384 = peg$literalExpectation("$value", false),
      peg$c385 = function peg$c385(v) {
    return {
      name: v
    };
  },
      peg$c386 = "?",
      peg$c387 = peg$literalExpectation("?", false),
      peg$c388 = function peg$c388(p, q) {
    q.$path = p;
    return q;
  },
      peg$c389 = function peg$c389(p) {
    return { $path: p };
  },
      peg$c390 = function peg$c390(q) {
    return q;
  },
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{ line: 1, column: 1 }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos /*: number */) {
    var _posType = _flowRuntime2.default.number();

    _flowRuntime2.default.param("pos", _posType).assert(pos);

    var details = peg$posDetailsCache[pos],
        p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parseurl();

    return s0;
  }

  function peg$parseWSP() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c1);
      }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$c2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c3);
      }
    }

    return s0;
  }

  function peg$parseINT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    if (peg$c5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c6);
      }
    }

    return s0;
  }

  function peg$parseHEXDIG2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHEXDIG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIG();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIG4() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHEXDIG2();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIG2();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIG8() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHEXDIG4();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIG8();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSQUOTE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c7) {
      s0 = peg$c7;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c8);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c9;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }
    }

    return s0;
  }

  function peg$parseDQUOTE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c11) {
      s0 = peg$c11;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c12);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c13;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c14);
        }
      }
    }

    return s0;
  }

  function peg$parseprimitiveLiteral() {
    var s0;

    s0 = peg$parsenull();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedecimal();
      if (s0 === peg$FAILED) {
        s0 = peg$parseint32();
        if (s0 === peg$FAILED) {
          s0 = peg$parseboolean();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenanInfinityLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestring();
              if (s0 === peg$FAILED) {
                s0 = peg$parseparameterAlias();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecastDecimalFromLiteral() {
    var s0;

    s0 = peg$parsedecimal();
    if (s0 === peg$FAILED) {
      s0 = peg$parseint32();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenull();
      }
    }

    return s0;
  }

  function peg$parsecastInt32FromLiteral() {
    var s0;

    s0 = peg$parseint32();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenull();
    }

    return s0;
  }

  function peg$parsecastBooleanFromLiteral() {
    var s0;

    s0 = peg$parseint32();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenull();
      if (s0 === peg$FAILED) {
        s0 = peg$parseboolean();
      }
    }

    return s0;
  }

  function peg$parsecastDateTimeFromLiteral() {
    var s0;

    s0 = peg$parsedate();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedateTimeOffset();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetimeOfDay();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenull();
        }
      }
    }

    return s0;
  }

  function peg$parsecastStringFromLiteral() {
    var s0;

    s0 = peg$parsedate();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedateTimeOffset();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetimeOfDay();
        if (s0 === peg$FAILED) {
          s0 = peg$parseprimitiveLiteral();
        }
      }
    }

    return s0;
  }

  function peg$parsenull() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenullValue();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenullValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c17);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseidentifierPart();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c10);
            }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c19);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c23) {
          s1 = peg$c23;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c24);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c26;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c27);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsedateTimeOffset() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedateTimeOffsetBody();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSQUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedateBody();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSQUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c29(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimeOfDay() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetimeBody();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSQUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateBody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseyear();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c31;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c32);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsezeroToTwelve();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c31;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c32);
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsezeroToThirtyOne();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c33(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimeBodyA() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsezeroToTwentyFour();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c34;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsezeroToSixty();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimeBodyB() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetimeBodyA();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c34;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsezeroToSixty();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimeBodyC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetimeBodyB();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c37;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINT();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimeBody() {
    var s0;

    s0 = peg$parsetimeBodyC();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetimeBodyB();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetimeBodyA();
      }
    }

    return s0;
  }

  function peg$parsedateTimeBody() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedateBody();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 84) {
        s2 = peg$c40;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetimeBody();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeOffsetBody() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsedateTimeBody();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 90) {
        s2 = peg$c43;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c44);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedateTimeBody();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesign();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsezeroToTwentyFour();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c46) {
              s4 = peg$c46;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c47);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c48(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedecimal() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c37;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c38);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseDIGIT();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseDIGIT();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 77) {
              s5 = peg$c49;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c50);
              }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 109) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c52);
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c53(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesign();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 77) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c50);
            }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 109) {
              s3 = peg$c51;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c52);
              }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c54(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseint32() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalidstring();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSQUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenanInfinityLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenanInfinity();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c57(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoneToNine() {
    var s0;

    if (peg$c58.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c59);
      }
    }

    return s0;
  }

  function peg$parsezeroToTwelve() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c26;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c27);
      }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c58.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c59);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c60(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c61.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c62);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsezeroToThirteen() {
    var s0;

    s0 = peg$parsezeroToTwelve();
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c63) {
        s0 = peg$c63;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c64);
        }
      }
    }

    return s0;
  }

  function peg$parsezeroToSixty() {
    var s0, s1, s2;

    if (input.substr(peg$currPos, 2) === peg$c65) {
      s0 = peg$c65;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c66);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$c67.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c68);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsezeroToThirtyOne() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 51) {
      s1 = peg$c69;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c70);
      }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c72);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c73(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c62);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsezeroToTwentyFour() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 50) {
      s1 = peg$c74;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c75);
      }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c76.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c77);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c78(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c72);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseyear() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDIGIT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c79(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesign() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c80;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c81);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c32);
        }
      }
    }

    return s0;
  }

  function peg$parsenan() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c82) {
      s0 = peg$c82;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c83);
      }
    }

    return s0;
  }

  function peg$parsenegativeInfinity() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c85);
      }
    }

    return s0;
  }

  function peg$parsepositiveInfinity() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c86) {
      s0 = peg$c86;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c87);
      }
    }

    return s0;
  }

  function peg$parsenanInfinity() {
    var s0;

    s0 = peg$parsenan();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenegativeInfinity();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepositiveInfinity();
      }
    }

    return s0;
  }

  function peg$parseparameterAlias() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parselxParameterAliases();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c88(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselxParameterAliases() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c89) {
      s0 = peg$c89;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c90);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c91) {
        s0 = peg$c91;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c92);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 19) === peg$c93) {
          s0 = peg$c93;
          peg$currPos += 19;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c94);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c95) {
            s0 = peg$c95;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c96);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 15) === peg$c97) {
              s0 = peg$c97;
              peg$currPos += 15;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c98);
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseunreserved() {
    var s0;

    if (peg$c99.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c100);
      }
    }

    return s0;
  }

  function peg$parsevalidstring() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c101.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c102);
      }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parseescapedQuote();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c101.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c102);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseescapedQuote();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c103(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseescapedQuote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c105);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c106(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseQCHAR_NO_AMP_DQUOTE() {
    var s0;

    if (peg$c107.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c108);
      }
    }

    return s0;
  }

  function peg$parseidentifierPart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c109.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c110);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseunreserved();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseunreserved();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c111(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifierPathParts() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c112;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c113);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifierPart();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifierPathParts();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c114(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifierPath() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPart();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifierPathParts();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c115(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifierRoot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPath();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunit();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c116(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c38);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunitArg();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c118);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c119(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunitArg() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c120) {
      s0 = peg$c120;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c121);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c122) {
        s0 = peg$c122;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c123);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c124) {
          s0 = peg$c124;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c125);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c126) {
            s0 = peg$c126;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c127);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c128) {
              s0 = peg$c128;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c129);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c130) {
                s0 = peg$c130;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c131);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c132) {
                  s0 = peg$c132;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c133);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c134) {
                    s0 = peg$c134;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c135);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c136) {
                      s0 = peg$c136;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c137);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c138) {
                        s0 = peg$c138;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c139);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c140) {
                          s0 = peg$c140;
                          peg$currPos += 6;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c141);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c142) {
                            s0 = peg$c142;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c143);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 10) === peg$c144) {
                              s0 = peg$c144;
                              peg$currPos += 10;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c145);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecallback() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c146) {
      s1 = peg$c146;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c147);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifierPart();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c148(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetop() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c149) {
      s1 = peg$c149;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c150);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c151(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c149) {
        s1 = peg$c149;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c150);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c153();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexpand() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c154) {
      s1 = peg$c154;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c155);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpandList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c156(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c154) {
        s1 = peg$c154;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c155);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c157();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexpandList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPath();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c158;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWSP();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpandOptionList();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseWSP();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s7 = peg$c160;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c161);
                }
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c162(s1, s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c163;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c164);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWSP();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpandList();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c165(s1, s2, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c166(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpandOption() {
    var s0;

    s0 = peg$parseexpand();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefilter();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesearch();
        if (s0 === peg$FAILED) {
          s0 = peg$parseorderby();
          if (s0 === peg$FAILED) {
            s0 = peg$parseskip();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetop();
              if (s0 === peg$FAILED) {
                s0 = peg$parseinlinecount();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseselect();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunsupported();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexpandOptionList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpandOption();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c167;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c168);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpandOptionList();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c169(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpandOption();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c170(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseskip() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c171) {
      s1 = peg$c171;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c172);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c173(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c171) {
        s1 = peg$c171;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c172);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c174();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseformat() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c175) {
      s1 = peg$c175;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c176);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c152);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c177(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c175) {
        s1 = peg$c175;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c176);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c178();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinlinecount() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c179) {
      s1 = peg$c179;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c180);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboolean();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c181(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c179) {
        s1 = peg$c179;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c180);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c182();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesearch() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c183) {
      s1 = peg$c183;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c184);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesearchExpr();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c185(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c183) {
        s1 = peg$c183;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c184);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c186();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesearchExpr() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesearchTerm();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c187(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesearchTerm() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepositiveSearchTerm();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c187(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepositiveSearchTerm() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesearchPhrase();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c187(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesearchPhrase() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseQCHAR_NO_AMP_DQUOTE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseQCHAR_NO_AMP_DQUOTE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDQUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c188(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalidstring();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c189(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseorderby() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c190) {
      s1 = peg$c190;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c191);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseorderbyList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c192(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c190) {
        s1 = peg$c190;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c191);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c193();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseorderbyList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseidentifierPath();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parseWSP();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c194) {
          s5 = peg$c194;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c195);
          }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c196) {
            s5 = peg$c196;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c197);
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c198(s2, s3);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c163;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c164);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWSP();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseorderbyList();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c199(s1, s5);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c200(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselect() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c201) {
      s1 = peg$c201;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c202);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselectList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c203(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c201) {
        s1 = peg$c201;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c202);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c204();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseselectList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseidentifierPath();
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c205) {
        s3 = peg$c205;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c206);
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c207(s2, s3);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c208;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c209);
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c163;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c164);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseWSP();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseWSP();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseselectList();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c199(s1, s5);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c200(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseapply() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c210) {
      s1 = peg$c210;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c211);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetransformationsList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c212(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetransformationsList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsetransformation();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c112;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c113);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWSP();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetransformationsList();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c213(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetransformation() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c214) {
      s1 = peg$c214;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c215);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWSP();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefilterTransformationExpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWSP();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c160;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c161);
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c216(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c217) {
        s1 = peg$c217;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c218);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c219(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c220) {
          s1 = peg$c220;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c221);
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c158;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c159);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseWSP();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseaggregateExprList();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseWSP();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c160;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c161);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c222(s1, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsetransformationArg();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c158;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c159);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseWSP();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseapplyList();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseWSP();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c160;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c161);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c223(s1, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetransformationArg() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c224) {
      s0 = peg$c224;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c226) {
        s0 = peg$c226;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c227);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c228) {
          s0 = peg$c228;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c229);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c230) {
            s0 = peg$c230;
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c231);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c232) {
              s0 = peg$c232;
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c233);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 13) === peg$c234) {
                s0 = peg$c234;
                peg$currPos += 13;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c235);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c236) {
                  s0 = peg$c236;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c237);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c238) {
                    s0 = peg$c238;
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c239);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c240) {
                      s0 = peg$c240;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c241);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseapplyList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseapplyItem();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c163;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c164);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWSP();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseapplyList();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c242(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseapplyItem() {
    var s0;

    s0 = peg$parsetransformation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsealiasExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepart();
      }
    }

    return s0;
  }

  function peg$parsefilterTransformationExpr() {
    var s0;

    s0 = peg$parseorTransExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseandTransExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureAndOrTransExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecollectionFuncExpr();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecond();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseclosureAndOrTransExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c158;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseorTransExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c160;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c161);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c243(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c158;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWSP();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseandTransExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWSP();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c160;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c161);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c244(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseleftChildOfOrTransExpr() {
    var s0;

    s0 = peg$parseandTransExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureAndOrTransExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecollectionFuncExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecond();
        }
      }
    }

    return s0;
  }

  function peg$parserightChildOfOrTransExpr() {
    var s0;

    s0 = peg$parseorTransExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseandTransExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureAndOrTransExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecollectionFuncExpr();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecond();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseleftChildOfAndTransExpr() {
    var s0;

    s0 = peg$parseclosureAndOrTransExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecollectionFuncExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecond();
      }
    }

    return s0;
  }

  function peg$parserightChildOfAndTransExpr() {
    var s0;

    s0 = peg$parseandTransExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureAndOrTransExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecollectionFuncExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecond();
        }
      }
    }

    return s0;
  }

  function peg$parseorTransExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftChildOfOrTransExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c245) {
          s3 = peg$c245;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c246);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserightChildOfOrTransExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c247(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseandTransExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftChildOfAndTransExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c248) {
          s3 = peg$c248;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c249);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserightChildOfAndTransExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c247(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaggregateExprList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseaggregateExprItem();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c163;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c164);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWSP();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseaggregateExprList();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c242(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaggregateExprItem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseidentifierRoot();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c250) {
          s3 = peg$c250;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c251);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseaggregateMethod();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseWSP();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseWSP();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c252) {
                  s7 = peg$c252;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c253);
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseWSP();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseWSP();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseidentifierPart();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c254(s1, s5, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c255) {
        s1 = peg$c255;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c256);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWSP();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c252) {
            s3 = peg$c252;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c253);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWSP();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierPart();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifierRoot();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseWSP();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseWSP();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c252) {
              s3 = peg$c252;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c253);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseWSP();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseWSP();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifierPart();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierRoot();
        }
      }
    }

    return s0;
  }

  function peg$parseaggregateMethod() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c257) {
      s0 = peg$c257;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c258);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c259) {
        s0 = peg$c259;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c260);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c261) {
          s0 = peg$c261;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c262);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c263) {
            s0 = peg$c263;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c264);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c265) {
              s0 = peg$c265;
              peg$currPos += 13;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c266);
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealiasExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemathExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c252) {
          s3 = peg$c252;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c253);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifierPart();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c267(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWSP();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c252) {
            s3 = peg$c252;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c253);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWSP();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierPart();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c268(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifierRoot();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseWSP();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseWSP();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c252) {
              s3 = peg$c252;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c253);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseWSP();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseWSP();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifierPart();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c267(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsefilter() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c269) {
      s1 = peg$c269;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c270);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefilterExpr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c271(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c269) {
        s1 = peg$c269;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c270);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c272();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefilterExpr() {
    var s0;

    s0 = peg$parseorExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseandExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureAndOrExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseclosureSingleCond();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecond();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseclosureAndOrExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c158;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseorExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c160;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c161);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c243(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c158;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWSP();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseandExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWSP();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c160;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c161);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c244(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseclosureSingleCond() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c158;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecond();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c160;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c161);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c243(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseleftChildOfOrExpr() {
    var s0;

    s0 = peg$parseandExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureAndOrExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureSingleCond();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecond();
        }
      }
    }

    return s0;
  }

  function peg$parserightChildOfOrExpr() {
    var s0;

    s0 = peg$parseorExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseandExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureAndOrExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseclosureSingleCond();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecond();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseleftChildOfAndExpr() {
    var s0;

    s0 = peg$parseclosureAndOrExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureSingleCond();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecond();
      }
    }

    return s0;
  }

  function peg$parserightChildOfAndExpr() {
    var s0;

    s0 = peg$parseandExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureAndOrExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureSingleCond();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecond();
        }
      }
    }

    return s0;
  }

  function peg$parseorExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftChildOfOrExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c245) {
          s3 = peg$c245;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c246);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserightChildOfOrExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c273(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseandExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftChildOfAndExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c248) {
          s3 = peg$c248;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c249);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserightChildOfAndExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c273(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebooleanFunctions2Args() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c274) {
      s0 = peg$c274;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c275);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c276) {
        s0 = peg$c276;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c277);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c278) {
          s0 = peg$c278;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c279);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c280) {
            s0 = peg$c280;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c281);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c282) {
              s0 = peg$c282;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c283);
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebooleanFunc() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebooleanFunctions2Args();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepart();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c163;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c164);
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWSP();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepart();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c160;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c161);
                  }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c284(s1, s3, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c285) {
        s1 = peg$c285;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c286);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepart();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c160;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c161);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c287(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseotherFunctions1Arg() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c288) {
      s0 = peg$c288;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c289);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c290) {
        s0 = peg$c290;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c291);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c292) {
          s0 = peg$c292;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c293);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c294) {
            s0 = peg$c294;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c295);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c138) {
              s0 = peg$c138;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c139);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c134) {
                s0 = peg$c134;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c135);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c130) {
                  s0 = peg$c130;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c131);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c128) {
                    s0 = peg$c128;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c129);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c126) {
                      s0 = peg$c126;
                      peg$currPos += 6;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c127);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c124) {
                        s0 = peg$c124;
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c125);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c296) {
                          s0 = peg$c296;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c297);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c298) {
                            s0 = peg$c298;
                            peg$currPos += 5;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c299);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c300) {
                              s0 = peg$c300;
                              peg$currPos += 7;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c301);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseotherFunc1() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseotherFunctions1Arg();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepart();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c160;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c161);
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c302(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecollectionFuncExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseidPathANDfuncArgExpr();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifierPart();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c34;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifierPart();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c112;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c113);
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecollectionFuncExpr();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c160;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c161);
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c303(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidPathANDfuncArgExpr();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c159);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselambdaFunc();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c160;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c161);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c304(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseidPathANDfuncArgExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseidPartANDfuncArg();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseidPartANDfuncArg();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c305(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidPartANDfuncArg() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c112;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c113);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifierPart();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c306(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselambdaFunc() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseidentifierRoot();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c34;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselambdaVar();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseop();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWSP();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepart();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c307(s1, s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselambdaVar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPart();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c112;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c113);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifierRoot();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c308(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifierRoot();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c243(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseotherFunctions2Arg() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c309) {
      s0 = peg$c309;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c310);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c311) {
        s0 = peg$c311;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c312);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c313) {
          s0 = peg$c313;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c314);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c315) {
            s0 = peg$c315;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c316);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseotherFunc2() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseotherFunctions2Arg();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWSP();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepart();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c163;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c164);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWSP();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepart();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c160;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c161);
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c317(s1, s4, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c318) {
        s1 = peg$c318;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c319);
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c159);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepart();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c163;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c164);
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseWSP();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepart();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c163;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c164);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseWSP();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsepart();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c160;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c161);
                          }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c320(s3, s6, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c321) {
          s1 = peg$c321;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c322);
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c158;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c159);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepart();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s4 = peg$c163;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c164);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseWSP();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsepart();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s7 = peg$c163;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c164);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseWSP();
                      if (s8 === peg$FAILED) {
                        s8 = null;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsepart();
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s10 = peg$c160;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c161);
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c323(s3, s6, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecond() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemathExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSP();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseop();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWSP();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemathExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c324(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemathExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWSP();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseop();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWSP();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepart();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c324(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepart();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseWSP();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseWSP();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseop();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseWSP();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseWSP();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemathExpr();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c324(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseidentifierRoot();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseWSP();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseWSP();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseop();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseWSP();
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseWSP();
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsepart();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c324(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsepart();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseWSP();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseWSP();
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseop();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseWSP();
                  if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parseWSP();
                    }
                  } else {
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsepart();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c324(s1, s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsebooleanFunc();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemathExpr() {
    var s0;

    s0 = peg$parseadditiveOperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemultiplicativeOperation();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureMathExpr();
      }
    }

    return s0;
  }

  function peg$parseclosureMathExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c158;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemathExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c160;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c161);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c243(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadditiveOperation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseadditiveOperationLeftChild();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseadditiveOp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseadditiveOperationRightChild();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c324(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadditiveOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c325) {
      s0 = peg$c325;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c326);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c327) {
        s0 = peg$c327;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c328);
        }
      }
    }

    return s0;
  }

  function peg$parseadditiveOperationLeftChild() {
    var s0;

    s0 = peg$parsemultiplicativeOperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureMathExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepart();
      }
    }

    return s0;
  }

  function peg$parseadditiveOperationRightChild() {
    var s0;

    s0 = peg$parseadditiveOperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemultiplicativeOperation();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclosureMathExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepart();
        }
      }
    }

    return s0;
  }

  function peg$parsemultiplicativeOperation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemultiplicativeOperationLeftChild();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemultiplicativeOp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiplicativeOperationRightChild();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c324(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiplicativeOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c329) {
      s0 = peg$c329;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c330);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c331) {
        s0 = peg$c331;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c332);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c333) {
          s0 = peg$c333;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c334);
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemultiplicativeOperationLeftChild() {
    var s0;

    s0 = peg$parseclosureMathExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepart();
    }

    return s0;
  }

  function peg$parsemultiplicativeOperationRightChild() {
    var s0;

    s0 = peg$parsemultiplicativeOperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclosureMathExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepart();
      }
    }

    return s0;
  }

  function peg$parsepart() {
    var s0, s1;

    s0 = peg$parsecollectionFuncExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebooleanFunc();
      if (s0 === peg$FAILED) {
        s0 = peg$parseotherFunc2();
        if (s0 === peg$FAILED) {
          s0 = peg$parseotherFunc1();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecastExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseprimitiveLiteral();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c335(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$parsenowUnit();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseidentifierRoot();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecastExpression() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c336) {
      s1 = peg$c336;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c337);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWSP();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecastArgs();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWSP();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c160;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c161);
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c338(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecastArgs() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecastDecimalFromLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c163;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c164);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c339) {
              s5 = peg$c339;
              peg$currPos += 11;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c340);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c341(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecastInt32FromLiteral();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWSP();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c163;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c164);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWSP();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c342) {
                s5 = peg$c342;
                peg$currPos += 9;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c343);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c341(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecastBooleanFromLiteral();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWSP();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s3 = peg$c163;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c164);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseWSP();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c344) {
                  s5 = peg$c344;
                  peg$currPos += 11;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c345);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c341(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecastDateTimeFromLiteral();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseWSP();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s3 = peg$c163;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c164);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseWSP();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsedateTimeEdms();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c341(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecastStringFromLiteral();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseWSP();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s3 = peg$c163;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c164);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseWSP();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c346) {
                      s5 = peg$c346;
                      peg$currPos += 10;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c347);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c341(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedateTimeEdms() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c348) {
      s0 = peg$c348;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c349);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c350) {
        s0 = peg$c350;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c351);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c352) {
          s0 = peg$c352;
          peg$currPos += 13;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c353);
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenowUnit() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c354) {
      s1 = peg$c354;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c355);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunit();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c356(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c357) {
      s0 = peg$c357;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c358);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c359) {
        s0 = peg$c359;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c360);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c361) {
          s0 = peg$c361;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c362);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c363) {
            s0 = peg$c363;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c364);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c365) {
              s0 = peg$c365;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c366);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c367) {
                s0 = peg$c367;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c368);
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseunsupported() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c369;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c370);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c152);
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c371(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseexp();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 38) {
        s2 = peg$c372;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c373);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c169(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexp();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c170(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexp() {
    var s0;

    s0 = peg$parseexpand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseapply();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefilter();
        if (s0 === peg$FAILED) {
          s0 = peg$parseorderby();
          if (s0 === peg$FAILED) {
            s0 = peg$parseskip();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetop();
              if (s0 === peg$FAILED) {
                s0 = peg$parseformat();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseinlinecount();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseselect();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecallback();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsesearch();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseunsupported();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsequery() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseexpList();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c374(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepredicate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPart();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c375;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c376);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseprimitiveLiteral();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c377(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepredicateList() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsepredicate();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c163;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c164);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWSP();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepredicateList();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c378(s1, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepredicate();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c379(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseprimitiveLiteral();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c380(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseresource() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifierPart();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepredicateList();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c160;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c161);
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c381(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifierPart();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c382(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepath() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseresource();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c112;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c113);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseendPath();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c378(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseresource();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c379(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseendPath() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseresource();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c112;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c113);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseendPath();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c378(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseresource();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c379(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c383) {
          s1 = peg$c383;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c384);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c255) {
            s1 = peg$c255;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c256);
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c385(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseurl() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsepath();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 63) {
        s2 = peg$c386;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c387);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequery();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c388(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepath();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c389(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequery();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c390(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return _returnType.assert(peg$result);
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
  }
}

var SyntaxError = exports.SyntaxError = peg$SyntaxError;
var parse = exports.parse = peg$parse;

var ODataAST1 = (() => {
var ODataAST = _flowRuntime2.default.type("ODataAST", _flowRuntime2.default.union(_flowRuntime2.default.exactObject(_flowRuntime2.default.property("$path", _flowRuntime2.default.tdz(function () {
  return $path;
}, "$path"), true), _flowRuntime2.default.property("$select", _flowRuntime2.default.tdz(function () {
  return $select;
}, "$select"), true), _flowRuntime2.default.property("$expand", _flowRuntime2.default.tdz(function () {
  return $expand;
}, "$expand"), true), _flowRuntime2.default.property("$filter", _flowRuntime2.default.tdz(function () {
  return $filter;
}, "$filter"), true), _flowRuntime2.default.property("$orderby", _flowRuntime2.default.tdz(function () {
  return $orderby;
}, "$orderby"), true), _flowRuntime2.default.property("$callback", _flowRuntime2.default.string(), true), _flowRuntime2.default.property("$format", _flowRuntime2.default.string(), true), _flowRuntime2.default.property("$search", _flowRuntime2.default.string(), true), _flowRuntime2.default.property("$count", _flowRuntime2.default.boolean(), true), _flowRuntime2.default.property("$skip", _flowRuntime2.default.number(), true), _flowRuntime2.default.property("$top", _flowRuntime2.default.number(), true)), _flowRuntime2.default.exactObject(_flowRuntime2.default.property("$apply", _flowRuntime2.default.tdz(function () {
  return $apply;
}, "$apply")))));

var $apply = _flowRuntime2.default.type("$apply", _flowRuntime2.default.array(_flowRuntime2.default.tdz(function () {
  return transformation;
}, "transformation")));

var $filter = _flowRuntime2.default.type("$filter", _flowRuntime2.default.tdz(function () {
  return filterExpr;
}, "filterExpr"));

var $orderby = _flowRuntime2.default.type("$orderby", _flowRuntime2.default.array(_flowRuntime2.default.object(_flowRuntime2.default.indexer("key", _flowRuntime2.default.string(), _flowRuntime2.default.union(_flowRuntime2.default.string("asc"), _flowRuntime2.default.string("desc"))))));

var $select = _flowRuntime2.default.type("$select", _flowRuntime2.default.array(_flowRuntime2.default.string()));

var $expand = _flowRuntime2.default.type("$expand", _flowRuntime2.default.array(_flowRuntime2.default.exactObject(_flowRuntime2.default.property("path", _flowRuntime2.default.string()), _flowRuntime2.default.property("options", ODataAST))));

var $path = _flowRuntime2.default.type("$path", _flowRuntime2.default.array(_flowRuntime2.default.exactObject(_flowRuntime2.default.property("name", _flowRuntime2.default.string()), _flowRuntime2.default.property("predicates", _flowRuntime2.default.array(_flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
  return primitiveLiteral;
}, "primitiveLiteral"), _flowRuntime2.default.tdz(function () {
  return ODataLiteralNode;
}, "ODataLiteralNode"))), true))));

var ODataTransformationNode = _flowRuntime2.default.type("ODataTransformationNode", _flowRuntime2.default.tdz(function () {
  return transformation;
}, "transformation"));

var ODataExpressionNode = _flowRuntime2.default.type("ODataExpressionNode", _flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
  return equalityExpr;
}, "equalityExpr"), _flowRuntime2.default.tdz(function () {
  return mathExpr;
}, "mathExpr"), _flowRuntime2.default.tdz(function () {
  return andOrExpr;
}, "andOrExpr"), _flowRuntime2.default.tdz(function () {
  return lambdaArg2;
}, "lambdaArg2")));

var ODataNode = _flowRuntime2.default.type("ODataNode", _flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
  return ODataLiteralNode;
}, "ODataLiteralNode"), _flowRuntime2.default.tdz(function () {
  return ODataFuncNode;
}, "ODataFuncNode"), _flowRuntime2.default.tdz(function () {
  return lambdaFunc;
}, "lambdaFunc"), _flowRuntime2.default.tdz(function () {
  return identifierRoot;
}, "identifierRoot"), _flowRuntime2.default.tdz(function () {
  return ODataNowNode;
}, "ODataNowNode"), _flowRuntime2.default.tdz(function () {
  return ODataCastNode;
}, "ODataCastNode"), _flowRuntime2.default.tdz(function () {
  return ODataAliasNode;
}, "ODataAliasNode"), ODataExpressionNode, _flowRuntime2.default.tdz(function () {
  return transformation;
}, "transformation"), _flowRuntime2.default.tdz(function () {
  return aggregateExpr;
}, "aggregateExpr"), _flowRuntime2.default.tdz(function () {
  return aggregateAlias;
}, "aggregateAlias"), _flowRuntime2.default.tdz(function () {
  return andOrTransformationExpr;
}, "andOrTransformationExpr"), _flowRuntime2.default.tdz(function () {
  return primitiveLiteral;
}, "primitiveLiteral")));

var ODataNowUnit = _flowRuntime2.default.type("ODataNowUnit", _flowRuntime2.default.union(_flowRuntime2.default.string("microseconds"), _flowRuntime2.default.string("milliseconds"), _flowRuntime2.default.string("second"), _flowRuntime2.default.string("minute"), _flowRuntime2.default.string("hour"), _flowRuntime2.default.string("day"), _flowRuntime2.default.string("week"), _flowRuntime2.default.string("month"), _flowRuntime2.default.string("quarter"), _flowRuntime2.default.string("year"), _flowRuntime2.default.string("decade"), _flowRuntime2.default.string("century"), _flowRuntime2.default.string("millennium")));

var ODataPropertyNode = _flowRuntime2.default.type("ODataPropertyNode", _flowRuntime2.default.tdz(function () {
  return identifierRoot;
}, "identifierRoot"));

var ODataAliasNode = _flowRuntime2.default.type("ODataAliasNode", _flowRuntime2.default.tdz(function () {
  return aliasExpression;
}, "aliasExpression"));

var ODataLiteralNode = _flowRuntime2.default.type("ODataLiteralNode", _flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
  return ODataLiteralNode$Null;
}, "ODataLiteralNode$Null"), _flowRuntime2.default.tdz(function () {
  return ODataLiteralNode$NaNInf;
}, "ODataLiteralNode$NaNInf"), _flowRuntime2.default.tdz(function () {
  return ODataLiteralNode$ParamAlias;
}, "ODataLiteralNode$ParamAlias"), _flowRuntime2.default.tdz(function () {
  return ODataLiteralNode$String;
}, "ODataLiteralNode$String"), _flowRuntime2.default.tdz(function () {
  return ODataLiteralNode$Number;
}, "ODataLiteralNode$Number"), _flowRuntime2.default.tdz(function () {
  return ODataLiteralNode$Boolean;
}, "ODataLiteralNode$Boolean")));

var ODataLiteralNode$Null = _flowRuntime2.default.type("ODataLiteralNode$Null", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("literal")), _flowRuntime2.default.property("literalType", _flowRuntime2.default.string("null")), _flowRuntime2.default.property("value", _flowRuntime2.default.tdz(function () {
  return nullValue;
}, "nullValue"))));

var ODataLiteralNode$NaNInf = _flowRuntime2.default.type("ODataLiteralNode$NaNInf", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("literal")), _flowRuntime2.default.property("literalType", _flowRuntime2.default.string("NaN/Infinity")), _flowRuntime2.default.property("value", _flowRuntime2.default.union(_flowRuntime2.default.string("NaN"), _flowRuntime2.default.string("INF"), _flowRuntime2.default.string("-INF")))));

var ODataLiteralNode$ParamAlias = _flowRuntime2.default.type("ODataLiteralNode$ParamAlias", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("literal")), _flowRuntime2.default.property("literalType", _flowRuntime2.default.string("parameter-alias")), _flowRuntime2.default.property("value", _flowRuntime2.default.union(_flowRuntime2.default.string("@lx_myUser_Id"), _flowRuntime2.default.string("@lx_myOrg_Id"), _flowRuntime2.default.string("@lx_myUser_Timezone"), _flowRuntime2.default.string("@lx_myTeam"), _flowRuntime2.default.string("@lx_myWorkflows")))));

var ODataLiteralNode$String = _flowRuntime2.default.type("ODataLiteralNode$String", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("literal")), _flowRuntime2.default.property("literalType", _flowRuntime2.default.union(_flowRuntime2.default.string("string"), _flowRuntime2.default.string("timeOfDay"), _flowRuntime2.default.string("date"), _flowRuntime2.default.string("dateTimeOffset"), _flowRuntime2.default.string("decimal"))), _flowRuntime2.default.property("value", _flowRuntime2.default.string())));

var ODataLiteralNode$Number = _flowRuntime2.default.type("ODataLiteralNode$Number", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("literal")), _flowRuntime2.default.property("literalType", _flowRuntime2.default.string("integer")), _flowRuntime2.default.property("value", _flowRuntime2.default.number())));

var ODataLiteralNode$Boolean = _flowRuntime2.default.type("ODataLiteralNode$Boolean", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("literal")), _flowRuntime2.default.property("literalType", _flowRuntime2.default.string("boolean")), _flowRuntime2.default.property("value", _flowRuntime2.default.boolean())));

var ODataLambdaNode = _flowRuntime2.default.type("ODataLambdaNode", _flowRuntime2.default.tdz(function () {
  return lambdaFunc;
}, "lambdaFunc"));

var ODataNowNode = _flowRuntime2.default.type("ODataNowNode", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("now")), _flowRuntime2.default.property("unit", ODataNowUnit)));

var ODataCastNode = _flowRuntime2.default.type("ODataCastNode", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("cast")), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(ODataLiteralNode, _flowRuntime2.default.union(_flowRuntime2.default.string("Edm.Boolean"), _flowRuntime2.default.string("Edm.String"), _flowRuntime2.default.string("Edm.Decimal"), _flowRuntime2.default.string("Edm.Int32"), _flowRuntime2.default.string("Edm.TimeOfDay"), _flowRuntime2.default.string("Edm.Date"), _flowRuntime2.default.string("Edm.DateTimeOffset"))))));

var ODataFuncNode = _flowRuntime2.default.type("ODataFuncNode", _flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
  return ODataFuncNode$Bool;
}, "ODataFuncNode$Bool"), _flowRuntime2.default.tdz(function () {
  return ODataFuncNode$Collection;
}, "ODataFuncNode$Collection"), _flowRuntime2.default.tdz(function () {
  return ODataFuncNode$Other1;
}, "ODataFuncNode$Other1"), _flowRuntime2.default.tdz(function () {
  return ODataFuncNode$Other2;
}, "ODataFuncNode$Other2")));

var ODataFuncNode$Bool = _flowRuntime2.default.type("ODataFuncNode$Bool", _flowRuntime2.default.union(_flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("functioncall")), _flowRuntime2.default.property("func", _flowRuntime2.default.union(_flowRuntime2.default.string("startswith"), _flowRuntime2.default.string("endswith"), _flowRuntime2.default.string("substringof"), _flowRuntime2.default.string("IsOf"), _flowRuntime2.default.string("contains"))), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
  return part;
}, "part"), _flowRuntime2.default.tdz(function () {
  return part;
}, "part")))), _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("functioncall")), _flowRuntime2.default.property("func", _flowRuntime2.default.string("IsOf")), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
  return part;
}, "part"))))));

var ODataFuncNode$Collection = _flowRuntime2.default.type("ODataFuncNode$Collection", function (ODataFuncNode$Collection) {
  return _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("functioncall")), _flowRuntime2.default.property("func", _flowRuntime2.default.union(_flowRuntime2.default.string("any"), _flowRuntime2.default.string("all"))), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
    return identifierRoot;
  }, "identifierRoot"), _flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
    return lambdaFunc;
  }, "lambdaFunc"), ODataFuncNode$Collection))));
});

var ODataFuncNode$Other1 = _flowRuntime2.default.type("ODataFuncNode$Other1", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("functioncall")), _flowRuntime2.default.property("func", _flowRuntime2.default.union(_flowRuntime2.default.string("tolower"), _flowRuntime2.default.string("toupper"), _flowRuntime2.default.string("trim"), _flowRuntime2.default.string("length"), _flowRuntime2.default.string("year"), _flowRuntime2.default.string("month"), _flowRuntime2.default.string("day"), _flowRuntime2.default.string("hour"), _flowRuntime2.default.string("minute"), _flowRuntime2.default.string("second"), _flowRuntime2.default.string("round"), _flowRuntime2.default.string("floor"), _flowRuntime2.default.string("ceiling"))), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
  return part;
}, "part")))));

var ODataFuncNode$Other2 = _flowRuntime2.default.type("ODataFuncNode$Other2", _flowRuntime2.default.union(_flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("functioncall")), _flowRuntime2.default.property("func", _flowRuntime2.default.union(_flowRuntime2.default.string("indexof"), _flowRuntime2.default.string("concat"), _flowRuntime2.default.string("substring"), _flowRuntime2.default.string("replace"))), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
  return part;
}, "part"), _flowRuntime2.default.tdz(function () {
  return part;
}, "part")))), _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("functioncall")), _flowRuntime2.default.property("func", _flowRuntime2.default.union(_flowRuntime2.default.string("substring"), _flowRuntime2.default.string("replace"))), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
  return part;
}, "part"), _flowRuntime2.default.tdz(function () {
  return part;
}, "part"), _flowRuntime2.default.tdz(function () {
  return part;
}, "part"))))));

var nullValue = _flowRuntime2.default.type("nullValue", _flowRuntime2.default.tuple(_flowRuntime2.default.string("null"), _flowRuntime2.default.string()));

var identifierRoot = _flowRuntime2.default.type("identifierRoot", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("property")), _flowRuntime2.default.property("name", _flowRuntime2.default.string()), _flowRuntime2.default.property("unit", ODataNowUnit, true)));

var primitiveLiteral = _flowRuntime2.default.type("primitiveLiteral", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("property")), _flowRuntime2.default.property("name", _flowRuntime2.default.string()), _flowRuntime2.default.property("value", _flowRuntime2.default.union(_flowRuntime2.default.string(), _flowRuntime2.default.number(), _flowRuntime2.default.boolean(), nullValue))));

var part = _flowRuntime2.default.type("part", _flowRuntime2.default.union(ODataFuncNode, ODataCastNode, ODataLiteralNode, ODataNowNode, identifierRoot));

var op = _flowRuntime2.default.type("op", _flowRuntime2.default.union(_flowRuntime2.default.string("eq"), _flowRuntime2.default.string("ne"), _flowRuntime2.default.string("ge"), _flowRuntime2.default.string("gt"), _flowRuntime2.default.string("le"), _flowRuntime2.default.string("lt")));

var andOrOp = _flowRuntime2.default.type("andOrOp", _flowRuntime2.default.union(_flowRuntime2.default.string("and"), _flowRuntime2.default.string("or")));

var additiveOp = _flowRuntime2.default.type("additiveOp", _flowRuntime2.default.union(_flowRuntime2.default.string("add"), _flowRuntime2.default.string("sub")));

var multiplicativeOp = _flowRuntime2.default.type("multiplicativeOp", _flowRuntime2.default.union(_flowRuntime2.default.string("mul"), _flowRuntime2.default.string("div"), _flowRuntime2.default.string("mod")));

var mathOp = _flowRuntime2.default.type("mathOp", _flowRuntime2.default.union(additiveOp, multiplicativeOp));

var mathExpr = _flowRuntime2.default.type("mathExpr", function (mathExpr) {
  return _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", mathOp), _flowRuntime2.default.property("left", _flowRuntime2.default.union(mathExpr, part)), _flowRuntime2.default.property("right", _flowRuntime2.default.union(mathExpr, part)));
});

var equalityExpr = _flowRuntime2.default.type("equalityExpr", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", op), _flowRuntime2.default.property("left", _flowRuntime2.default.union(mathExpr, part)), _flowRuntime2.default.property("right", _flowRuntime2.default.union(mathExpr, part))));

var andOrExpr = _flowRuntime2.default.type("andOrExpr", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", andOrOp), _flowRuntime2.default.property("left", _flowRuntime2.default.tdz(function () {
  return filterExpr;
}, "filterExpr")), _flowRuntime2.default.property("right", _flowRuntime2.default.tdz(function () {
  return filterExpr;
}, "filterExpr"))));

var filterExpr = _flowRuntime2.default.type("filterExpr", _flowRuntime2.default.union(ODataFuncNode$Bool, equalityExpr, andOrExpr));

// transaction expressions

var transformation = _flowRuntime2.default.type("transformation", _flowRuntime2.default.union(_flowRuntime2.default.tdz(function () {
  return transformationAggregate;
}, "transformationAggregate"), _flowRuntime2.default.tdz(function () {
  return transformationIdentity;
}, "transformationIdentity"), _flowRuntime2.default.tdz(function () {
  return transformationFilter;
}, "transformationFilter"), _flowRuntime2.default.tdz(function () {
  return transformationApply;
}, "transformationApply")));

var transformationArg = _flowRuntime2.default.type("transformationArg", _flowRuntime2.default.union(_flowRuntime2.default.string("topcount"), _flowRuntime2.default.string("topsum"), _flowRuntime2.default.string("toppercent"), _flowRuntime2.default.string("bottomcount"), _flowRuntime2.default.string("bottomsum"), _flowRuntime2.default.string("bottompercent"), _flowRuntime2.default.string("expand"), _flowRuntime2.default.string("search"), _flowRuntime2.default.string("compute")));

var aggregateExpr = _flowRuntime2.default.type("aggregateExpr", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("aggregate")), _flowRuntime2.default.property("func", _flowRuntime2.default.union(_flowRuntime2.default.string("sum"), _flowRuntime2.default.string("min"), _flowRuntime2.default.string("max"), _flowRuntime2.default.string("average"), _flowRuntime2.default.string("countdistinct"))), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(identifierRoot))));

var aggregateAlias = _flowRuntime2.default.type("aggregateAlias", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("alias")), _flowRuntime2.default.property("name", _flowRuntime2.default.string()), _flowRuntime2.default.property("expression", aggregateExpr)));

var transformationAggregate = _flowRuntime2.default.type("transformationAggregate", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("transformation")), _flowRuntime2.default.property("func", _flowRuntime2.default.string("aggregate")), _flowRuntime2.default.property("args", _flowRuntime2.default.array(_flowRuntime2.default.union(transformation, _flowRuntime2.default.tdz(function () {
  return aliasExpression;
}, "aliasExpression"), part, aggregateAlias)))));

var transformationIdentity = _flowRuntime2.default.type("transformationIdentity", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("transformation")), _flowRuntime2.default.property("func", _flowRuntime2.default.string("identity")), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple())));

var transformationFilter = _flowRuntime2.default.type("transformationFilter", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("transformation")), _flowRuntime2.default.property("func", _flowRuntime2.default.string("filter")), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(_flowRuntime2.default.tdz(function () {
  return filterTransformationExpr;
}, "filterTransformationExpr")))));

var transformationApply = _flowRuntime2.default.type("transformationApply", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("transformation")), _flowRuntime2.default.property("func", transformationArg), _flowRuntime2.default.property("args", _flowRuntime2.default.array(_flowRuntime2.default.union(transformation, _flowRuntime2.default.tdz(function () {
  return aliasExpression;
}, "aliasExpression"), part, aggregateAlias)))));

var andOrTransformationExpr = _flowRuntime2.default.type("andOrTransformationExpr", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", andOrOp), _flowRuntime2.default.property("left", _flowRuntime2.default.tdz(function () {
  return filterTransformationExpr;
}, "filterTransformationExpr")), _flowRuntime2.default.property("right", _flowRuntime2.default.tdz(function () {
  return filterTransformationExpr;
}, "filterTransformationExpr"))));

var filterTransformationExpr = _flowRuntime2.default.type("filterTransformationExpr", _flowRuntime2.default.union(ODataFuncNode$Collection, ODataFuncNode$Bool, equalityExpr, andOrTransformationExpr));

// alias expressions

var aliasExpression = _flowRuntime2.default.type("aliasExpression", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("alias")), _flowRuntime2.default.property("name", _flowRuntime2.default.string()), _flowRuntime2.default.property("expression", _flowRuntime2.default.union(mathExpr, part, transformation))));

// lambda

var lambdaArg2 = _flowRuntime2.default.type("lambdaArg2", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", op), _flowRuntime2.default.property("left", identifierRoot), _flowRuntime2.default.property("right", part)));

var lambdaFunc = _flowRuntime2.default.type("lambdaFunc", _flowRuntime2.default.exactObject(_flowRuntime2.default.property("type", _flowRuntime2.default.string("lambda")), _flowRuntime2.default.property("args", _flowRuntime2.default.tuple(identifierRoot, lambdaArg2))));return ODataAST
})()

/*::
export type ODataAST = {|
  $path?: $path,
  $select?: $select,
  $expand?: $expand,
  $filter?: $filter,
  $orderby?: $orderby,
  $callback?: string,
  $format?: string,
  $search?: string,
  $count?: boolean,
  $skip?: number,
  $top?: number
|} | {|
  $apply: $apply
|}

export type $apply = Array<transformation>
export type $filter = filterExpr
export type $orderby = Array<{ [key: string]: 'asc' | 'desc' }>
export type $select = Array<string>
export type $expand = Array<{|
  path: string,
  options: ODataAST
|}>
export type $path = Array<{|
  name: string,
  predicates?: Array<primitiveLiteral | ODataLiteralNode>
|}>

export type ODataTransformationNode = transformation
export type ODataExpressionNode = equalityExpr | mathExpr | andOrExpr | lambdaArg2
export type ODataNode = ODataLiteralNode | ODataFuncNode | lambdaFunc | identifierRoot | ODataNowNode | ODataCastNode | ODataAliasNode | ODataExpressionNode | transformation | aggregateExpr | aggregateAlias | andOrTransformationExpr | primitiveLiteral
export type ODataNowUnit = 'microseconds' | 'milliseconds' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year' | 'decade' | 'century' | 'millennium';
export type ODataPropertyNode = identifierRoot
export type ODataAliasNode = aliasExpression
export type ODataLiteralNode = ODataLiteralNode$Null | ODataLiteralNode$NaNInf | ODataLiteralNode$ParamAlias | ODataLiteralNode$String | ODataLiteralNode$Number | ODataLiteralNode$Boolean
export type ODataLiteralNode$Null = {|
  type: 'literal',
  literalType: 'null',
  value: nullValue
|}
export type ODataLiteralNode$NaNInf = {|
  type: 'literal',
  literalType: 'NaN/Infinity',
  value: 'NaN' | 'INF' | '-INF'
|}
export type ODataLiteralNode$ParamAlias = {|
  type: 'literal',
  literalType: 'parameter-alias',
  value: '@lx_myUser_Id' | '@lx_myOrg_Id' | '@lx_myUser_Timezone' | '@lx_myTeam' | '@lx_myWorkflows'
|}
export type ODataLiteralNode$String = {|
  type: 'literal',
  literalType: 'string' | 'timeOfDay' | 'date' | 'dateTimeOffset' | 'decimal',
  value: string
|}
export type ODataLiteralNode$Number = {|
  type: 'literal',
  literalType: 'integer',
  value: number
|}
export type ODataLiteralNode$Boolean = {|
  type: 'literal',
  literalType: 'boolean',
  value: boolean
|}
export type ODataLambdaNode = lambdaFunc
export type ODataNowNode = {|
  type: 'now',
  unit: ODataNowUnit
|}
export type ODataCastNode = {|
  type: 'cast',
  args: [
    ODataLiteralNode,
    'Edm.Boolean' | 'Edm.String' | 'Edm.Decimal' | 'Edm.Int32' | 'Edm.TimeOfDay' | 'Edm.Date' | 'Edm.DateTimeOffset'
  ]
|}

export type ODataFuncNode = ODataFuncNode$Bool | ODataFuncNode$Collection | ODataFuncNode$Other1 | ODataFuncNode$Other2
export type ODataFuncNode$Bool = {|
  type: 'functioncall',
  func: 'startswith' | 'endswith' | 'substringof' | 'IsOf' | 'contains',
  args: [part, part]
|} | {|
  type: 'functioncall',
  func: 'IsOf',
  args: [part]
|}
export type ODataFuncNode$Collection = {|
  type: 'functioncall',
  func: 'any' | 'all',
  args: [
    identifierRoot,
    lambdaFunc | ODataFuncNode$Collection
  ]
|}
export type ODataFuncNode$Other1 = {|
  type: 'functioncall',
  func: 'tolower' | 'toupper' | 'trim' | 'length' | 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'round' | 'floor' | 'ceiling',
  args: [part]
|}
export type ODataFuncNode$Other2 = {|
  type: 'functioncall',
  func: 'indexof' | 'concat' | 'substring' | 'replace',
  args: [part, part]
|} | {|
  type: 'functioncall',
  func: 'substring' | 'replace',
  args: [part, part, part]
|}

type nullValue = ['null', string]

type identifierRoot = {|
  type: 'property',
  name: string,
  unit?: ODataNowUnit
|}

type primitiveLiteral = {|
  type: 'property',
  name: string,
  value: string | number | boolean | nullValue
|}

type part =
  | ODataFuncNode
  | ODataCastNode
  | ODataLiteralNode
  | ODataNowNode
  | identifierRoot

type op = 'eq' | 'ne' | 'ge' | 'gt' | 'le' | 'lt'
type andOrOp = 'and' | 'or'
type additiveOp = 'add' | 'sub'
type multiplicativeOp = 'mul' | 'div' | 'mod'
type mathOp = additiveOp | multiplicativeOp

type mathExpr = {|
  type: mathOp,
  left: mathExpr | part,
  right: mathExpr | part
|}

type equalityExpr = {|
  type: op,
  left: mathExpr | part,
  right: mathExpr | part
|}

type andOrExpr = {|
  type: andOrOp,
  left: filterExpr,
  right: filterExpr
|}

type filterExpr = ODataFuncNode$Bool | equalityExpr | andOrExpr

// transaction expressions

type transformation = transformationAggregate | transformationIdentity | transformationFilter | transformationApply

type transformationArg = 'topcount' | 'topsum' | 'toppercent' | 'bottomcount' | 'bottomsum' | 'bottompercent' | 'expand' | 'search' | 'compute'

type aggregateExpr = {|
  type: 'aggregate',
  func: 'sum' | 'min' | 'max' | 'average' | 'countdistinct',
  args: [identifierRoot]
|}

type aggregateAlias = {|
  type: 'alias',
  name: string,
  expression: aggregateExpr
|}

type transformationAggregate = {|
  type: 'transformation',
  func: 'aggregate',
  args: Array<transformation | aliasExpression | part | aggregateAlias>
|}

type transformationIdentity = {|
  type: 'transformation',
  func: 'identity',
  args: []
|}

type transformationFilter = {|
  type: 'transformation',
  func: 'filter',
  args: [filterTransformationExpr]
|}

type transformationApply = {|
  type: 'transformation',
  func: transformationArg,
  args: Array<transformation | aliasExpression | part | aggregateAlias>
|}

type andOrTransformationExpr = {|
  type: andOrOp,
  left: filterTransformationExpr,
  right: filterTransformationExpr
|}

type filterTransformationExpr = ODataFuncNode$Collection | ODataFuncNode$Bool | equalityExpr | andOrTransformationExpr


// alias expressions

type aliasExpression = {|
  type: 'alias',
  name: string,
  expression: mathExpr | part | transformation
|}

// lambda

type lambdaArg2 = {|
  type: op,
  left: identifierRoot,
  right: part
|}

type lambdaFunc = {|
  type: 'lambda',
  args: [
    identifierRoot,
    lambdaArg2
  ]
|}
*/
